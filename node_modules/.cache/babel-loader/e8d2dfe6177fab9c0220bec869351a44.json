{"ast":null,"code":"var _jsxFileName = \"D:\\\\apps\\\\programming\\\\domino_pizza_ordering_ui\\\\src\\\\components\\\\fileUpload.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useRef, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction FileUpload() {\n  _s();\n\n  const fileRef = useRef(null);\n  const [File, setFile] = useState();\n  const [Order, setOrder] = useState({}); // const [Selected, setSelected] = useState(false);\n  // const changeHandler = (event) => {\n  //     setFile(event.target.files[0]);\n  //     setSelected(true);\n  // }\n\n  const handleSubmit = () => {\n    const formData = new FormData();\n    formData.append('file', fileRef.current.files[0]);\n    axios.post('/pml/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(res => {\n      setOrder(res.data.orderData.order);\n      console.log(res.data);\n    });\n  };\n\n  const toppings = area => {\n    if (area == \"0\") return \"Whole\";else if (area == \"1\") return \"First-Half\";else if (area == \"2\") return \"Second-Half\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"file\",\n      ref: fileRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSubmit(),\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), Order.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Order \", Order.id.number, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), Order.pizza.map(pizza => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\" Pizza \", pizza.id.number, \" - \", pizza.size[0], \", \", pizza.crust[0], \", \", pizza.type[0]]\n          }, pizza.id.number, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), pizza.toppings ? pizza.toppings.map(toppings => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Toppings \", toppings(toppings.id.area)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 40\n            }, this);\n          }) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(FileUpload, \"VgvI9kmCMuh3Z+edt47J2kXP9w8=\");\n\n_c = FileUpload;\nexport default FileUpload;\n\nvar _c;\n\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"sources":["D:/apps/programming/domino_pizza_ordering_ui/src/components/fileUpload.jsx"],"names":["React","Component","useRef","useState","axios","FileUpload","fileRef","File","setFile","Order","setOrder","handleSubmit","formData","FormData","append","current","files","post","headers","then","res","data","orderData","order","console","log","toppings","area","id","number","pizza","map","size","crust","type"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AAElB,QAAMC,OAAO,GAAGJ,MAAM,CAAC,IAAD,CAAtB;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,EAAhC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC,CAJkB,CAKlB;AAEA;AACA;AACA;AACA;;AAEA,QAAMQ,YAAY,GAAG,MAAM;AAEvB,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBR,OAAO,CAACS,OAAR,CAAgBC,KAAhB,CAAsB,CAAtB,CAAxB;AAEAZ,IAAAA,KAAK,CAACa,IAAN,CAAW,aAAX,EAA0BL,QAA1B,EAAoC;AAChCM,MAAAA,OAAO,EAAE;AAAC,wBAAe;AAAhB;AADuB,KAApC,EAEGC,IAFH,CAEQC,GAAG,IAAI;AACXV,MAAAA,QAAQ,CAACU,GAAG,CAACC,IAAJ,CAASC,SAAT,CAAmBC,KAApB,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACC,IAAhB;AACH,KALD;AAOH,GAZD;;AAcA,QAAMK,QAAQ,GAAIC,IAAD,IAAU;AACvB,QAAGA,IAAI,IAAI,GAAX,EACI,OAAO,OAAP,CADJ,KAEK,IAAGA,IAAI,IAAI,GAAX,EACD,OAAO,YAAP,CADC,KAEA,IAAGA,IAAI,IAAI,GAAX,EACD,OAAO,aAAP;AACP,GAPD;;AASA,sBACI;AAAA,4BACA;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,GAAG,EAAErB;AAApC;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAA,6BACI;AAAQ,QAAA,OAAO,EAAE,MAAMK,YAAY,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFA,EAKEF,KAAK,CAACmB,EAAN,gBACE;AAAA,8BACI;AAAA,6BAAYnB,KAAK,CAACmB,EAAN,CAASC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEMpB,KAAK,CAACqB,KAAN,CAAYC,GAAZ,CAAgBD,KAAK,IAAI;AACvB,4BACA;AAAA,kCACI;AAAA,kCAAmCA,KAAK,CAACF,EAAN,CAASC,MAA5C,SAAuDC,KAAK,CAACE,IAAN,CAAW,CAAX,CAAvD,QAAwEF,KAAK,CAACG,KAAN,CAAY,CAAZ,CAAxE,QAA0FH,KAAK,CAACI,IAAN,CAAW,CAAX,CAA1F;AAAA,aAAUJ,KAAK,CAACF,EAAN,CAASC,MAAnB;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEMC,KAAK,CAACJ,QAAN,GACEI,KAAK,CAACJ,QAAN,CAAeK,GAAf,CAAmBL,QAAQ,IAAI;AAC3B,gCAAO;AAAA,sCAAeA,QAAQ,CAACA,QAAQ,CAACE,EAAT,CAAYD,IAAb,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH,WAFD,CADF,gBAIG,qCANT;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA;AAUH,OAXC,CAFN;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,gBAiBE;AAAA;AAAA;AAAA;AAAA,YAtBJ;AAAA,kBADJ;AA4BH;;GA/DQtB,U;;KAAAA,U;AAiET,eAAeA,UAAf","sourcesContent":["import React, { Component, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction FileUpload() {\r\n\r\n    const fileRef = useRef(null);\r\n    const [File, setFile] = useState();\r\n    const [Order, setOrder] = useState({});\r\n    // const [Selected, setSelected] = useState(false);\r\n\r\n    // const changeHandler = (event) => {\r\n    //     setFile(event.target.files[0]);\r\n    //     setSelected(true);\r\n    // }\r\n\r\n    const handleSubmit = () => {\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', fileRef.current.files[0]);\r\n\r\n        axios.post('/pml/upload', formData, {\r\n            headers: {'Content-Type':'multipart/form-data'}\r\n        }).then(res => {\r\n            setOrder(res.data.orderData.order);\r\n            console.log(res.data)\r\n        });\r\n\r\n    }\r\n\r\n    const toppings = (area) => {\r\n        if(area == \"0\")\r\n            return \"Whole\";\r\n        else if(area == \"1\")\r\n            return \"First-Half\";\r\n        else if(area == \"2\")\r\n            return \"Second-Half\";\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <input type=\"file\" name=\"file\" ref={fileRef}></input>\r\n        <div>\r\n            <button onClick={() => handleSubmit()}>Submit</button>\r\n        </div>\r\n        { Order.id ? (\r\n            <div>\r\n                <div>Order {Order.id.number}:</div>\r\n                { Order.pizza.map(pizza => {\r\n                    return (\r\n                    <div>\r\n                        <div key={pizza.id.number}> Pizza {pizza.id.number} - {pizza.size[0]}, {pizza.crust[0]}, {pizza.type[0]}</div> \r\n                        { pizza.toppings ? (\r\n                            pizza.toppings.map(toppings => {\r\n                                return <div>Toppings {toppings(toppings.id.area)}</div>\r\n                            })\r\n                        ) : (<></>)\r\n                        } \r\n                    </div>);\r\n                }) }\r\n            </div>\r\n        ) : (\r\n            <div></div>\r\n        )}\r\n                    \r\n        </>\r\n    )\r\n}\r\n\r\nexport default FileUpload;"]},"metadata":{},"sourceType":"module"}